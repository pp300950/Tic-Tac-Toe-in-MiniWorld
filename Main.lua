-- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
local PLAYER, AI = "X", "O"

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function print_board(board)
    Chat:sendSystemMsg("‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    Chat:sendSystemMsg("#B‡∏ö‡∏≠‡∏ó O ,‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô X")
    for i = 1, 9, 3 do
        Chat:sendSystemMsg(" " .. board[i+2] .. " | " .. board[i+1] .. " | " .. board[i])
        if i < 7 then Chat:sendSystemMsg("---+---+---") end
    end
    Chat:sendSystemMsg("")
end


-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function check_winner(board)
    local win_patterns = {
        {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, -- ‡πÅ‡∏ñ‡∏ß
        {1, 4, 7}, {2, 5, 8}, {3, 6, 9}, -- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        {1, 5, 9}, {3, 5, 7}-- ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡πÅ‡∏¢‡∏á‡∏°‡∏∏‡∏°
    }

    for _, pattern in ipairs(win_patterns) do
        if board[pattern[1]] ~= " " and 
           board[pattern[1]] == board[pattern[2]] and 
           board[pattern[2]] == board[pattern[3]] then
            return board[pattern[1]] -- ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞ ("X" ‡∏´‡∏£‡∏∑‡∏≠ "O")
        end
    end

    return nil -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
end

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function is_full(board)
    for i = 1, 9 do
        if board[i] == " " then
            return false
        end
    end
    return true
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Minimax
function minimax(board, depth, is_maximizing)
    local winner = check_winner(board)
    if winner == AI then return 10 - depth end
    if winner == PLAYER then return depth - 10 end
    if is_full(board) then return 0 end

    if is_maximizing then
        local best_score = -math.huge
        for i = 1, 9 do
            if board[i] == " " then
                board[i] = AI
                local score = minimax(board, depth + 1, false)
                board[i] = " "
                best_score = math.max(best_score, score)
            end
        end
        return best_score
    else
        local best_score = math.huge
        for i = 1, 9 do
            if board[i] == " " then
                board[i] = PLAYER
                local score = minimax(board, depth + 1, true)
                board[i] = " "
                best_score = math.min(best_score, score)
            end
        end
        return best_score
    end
end

-- ‡∏´‡∏≤ move ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
function best_move(board)
    local best_score = -math.huge
    local move = nil

    for i = 1, 9 do
        if board[i] == " " then
            board[i] = AI
            local score = minimax(board, 0, false)
            board[i] = " "
            if score > best_score then
                best_score = score
                move = i
            end
        end
    end
    return move
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å"AIIposi"
function get_positions()
    local result, value = VarLib2:getGlobalVarByName(4, "Aposi")
    if not result or not value then
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ")
        return nil
    end

    local board = {" ", " ", " ", " ", " ", " ", " ", " ", " "} -- ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    local positions = {}

    for pos in string.gmatch(value, "[^|]+") do
        local x, y, z, entity = pos:match("([^,]+),([^,]+),([^,]+),([^,]+)")
        x, y, z = tonumber(x), tonumber(y), tonumber(z)
        
        if x and z then
            local index = (z * 3) + x + 1  -- ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X,Z ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á 1-9
            if entity == "player" then
                board[index] = PLAYER
            elseif entity == "bot" then
                board[index] = AI
            end
        end
    end

    return board
end

-- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
local board = get_positions()
if board then
    print("‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà AI ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô:")
    print_board(board)

    -- AI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    local move = best_move(board)
    if move then
        board[move] = AI  --‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        print("AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà: " .. move)
        print_board(board)

        -- ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á 1-9 ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î X, Z
        local x = (move - 1) % 3
        local z = math.floor((move - 1) / 3)

        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà AI ‡πÄ‡∏î‡∏¥‡∏ô‡∏•‡∏á‡πÑ‡∏õ
        VarLib2:setGlobalVarByName(4, "Group2", x .. "," .. 6 .. "," .. z)

        print("ü§ñ AI ‡∏ß‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà:", x, 7, z)
          if check_winner(board) == AI then
    
            Chat:sendSystemMsg("#G‡∏ö‡∏≠‡∏ó‡∏ä‡∏ô‡∏∞!!!")
            return
        end
    else

        Chat:sendSystemMsg("#Y‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏à‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏µ‡πÄ‡∏Å‡∏°")
    end
end
